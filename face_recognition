import face_recognition
import cv2
import numpy as np
import pickle
import time
import threading
import paho.mqtt.publish as publish
k=0
def pub():#发送指令
	global k
	k=1
	try:
                client_id="client2710"
                HOST = "10.196.83.16"
                PORT = 1883
                publish.single("lock", "on", qos = 0,hostname=HOST,port=PORT,     client_id=client_id,auth = {'username':"blackant", 'password':"blackantlab"})
                #print (time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(time.time())))
	finally:
		k=0

rtmp_addr = 'rtmp://10.196.83.16/live_2710/hello'

video_capture = cv2.VideoCapture(rtmp_addr)

#load model
f = open('saved_model/model.yaml','rb')
known_model = pickle.load(f)
f.close()
known_face_encodings, known_face_names = zip(*known_model)


# Initialize some variables
face_locations = []
face_encodings = []
face_names = []
process_this_frame = 0


while True:
    # Grab a single frame of video
    ret, frame = video_capture.read()
    if(ret):

        # Resize frame of video to 1/4 size for faster face recognition processing
        small_frame = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25)

        # Convert the image from BGR color (which OpenCV uses) to RGB color (which face_recognition uses)
        rgb_small_frame = small_frame[:, :, ::-1]

        # Only process every other frame of video to save time
        if(process_this_frame==0):
            process_this_frame=20
            #print (time.strftime('%Y-----%m-%d %H:%M:%S',time.localtime(time.time())))
            # Find all the faces and face encodings in the current frame of video
            face_locations = face_recognition.face_locations(rgb_small_frame,1)
            face_encodings = face_recognition.face_encodings(rgb_small_frame, face_locations)

            face_names = []
            for face_encoding in face_encodings:
                # See if the face is a match for the known face(s)
                matches = face_recognition.compare_faces(known_face_encodings, face_encoding, tolerance=0.40)
                name = "Unknown"

                # # If a match was found in known_face_encodings, just use the first one.
                # if True in matches:
                #     first_match_index = matches.index(True)
                #     name = known_face_names[first_match_index]

                # Or instead, use the known face with the smallest distance to the new face
                face_distances = face_recognition.face_distance(known_face_encodings, face_encoding)
                best_match_index = np.argmin(face_distances)
                if matches[best_match_index]:
                    name = known_face_names[best_match_index]
                    if(k==0):
                        t=threading.Thread(target=pub)
                        t.start()
                    #在这里填上要发送信息即可，这里就是找到对应的名字
                face_names.append(name)
                #print (time.strftime('%Y---%m-%d %H:%M:%S',time.localtime(time.time())))
                
		

        #process_this_frame = not process_this_frame
        process_this_frame=process_this_frame-1


        # Display the results
        for (top, right, bottom, left), name in zip(face_locations, face_names):
            # Scale back up face locations since the frame we detected in was scaled to 1/4 size
            top *= 4
            right *= 4
            bottom *= 4
            left *= 4

            # Draw a box around the face
            cv2.rectangle(frame, (left, top), (right, bottom), (0, 0, 255), 2)

            # Draw a label with a name below the face
            cv2.rectangle(frame, (left, bottom - 35), (right, bottom), (0, 0, 255), cv2.FILLED)
            font = cv2.FONT_HERSHEY_DUPLEX
            cv2.putText(frame, name, (left + 6, bottom - 6), font, 1.0, (255, 255, 255), 1)

        # Display the resulting image
        cv2.imshow('Video', frame)

        # Hit 'q' on the keyboard to quit!
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
    else:
        print("no connection")
        video_capture = cv2.VideoCapture(rtmp_addr)
    
# Release handle to the webcam
video_capture.release()
cv2.destroyAllWindows()
